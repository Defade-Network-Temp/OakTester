From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sun, 21 Aug 2022 23:29:22 +0200
Subject: [PATCH] Add server system


diff --git a/build.gradle.kts b/build.gradle.kts
index f0dbea64306d98e05d933cae8ed51d8f98f0c8df..2cbbf04eb01afd21277bc995b7c969cecbb3dfd4 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,7 +1,11 @@
+import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
+
 plugins {
     `java-library`
+    application
     id("minestom.publishing-conventions")
     id("minestom.native-conventions")
+    id("com.github.johnrengelman.shadow") version ("7.1.1")
 }
 
 allprojects {
@@ -40,6 +44,13 @@ tasks {
     }
 }
 
+application {
+    mainClass.set("net.defade.yokura.Main")
+    // This is included because Shadow is buggy. Wait for https://github.com/johnrengelman/shadow/issues/613 to befixed.
+    @Suppress("DEPRECATION")
+    mainClassName = "net.defade.yokura.Main"
+}
+
 dependencies {
     // Testing Framework
     testImplementation(project(mapOf("path" to ":testing")))
@@ -81,3 +92,7 @@ dependencies {
     api("io.github.jglrxavpok.hephaistos:common:${libs.versions.hephaistos.get()}")
     api("io.github.jglrxavpok.hephaistos:gson:${libs.versions.hephaistos.get()}")
 }
+
+tasks.withType<ShadowJar> {
+    archiveFileName.set("yokura.jar")
+}
\ No newline at end of file
diff --git a/src/main/java/net/defade/yokura/Main.java b/src/main/java/net/defade/yokura/Main.java
new file mode 100644
index 0000000000000000000000000000000000000000..24a5b433e0e5b8dbe485fa69b08735546048bfb4
--- /dev/null
+++ b/src/main/java/net/defade/yokura/Main.java
@@ -0,0 +1,44 @@
+package net.defade.yokura;
+
+import net.defade.yokura.config.YokuraConfig;
+import net.minestom.server.MinecraftServer;
+
+import java.io.*;
+
+public class Main {
+    public static void main(String[] args) {
+        String bismuthPassword;
+        File bismuthPasswordFile = new File("bismuth.password");
+
+        try {
+            if (!bismuthPasswordFile.exists()) {
+                bismuthPasswordFile.createNewFile();
+
+
+                PrintWriter printWriter = new PrintWriter(new FileWriter(bismuthPasswordFile));
+                printWriter.write("YQ=="); // 'a' character
+                printWriter.close();
+            }
+
+            BufferedReader bufferedReader = new BufferedReader(new FileReader(bismuthPasswordFile));
+            bismuthPassword = bufferedReader.readLine();
+        } catch (IOException exception) {
+            exception.printStackTrace();
+            System.exit(1);
+            return;
+        }
+
+        String[] finalArgs = new String[args.length + 1];
+        System.arraycopy(args, 0, finalArgs, 0, args.length);
+        finalArgs[finalArgs.length - 1] = "--bismuth-password=" + bismuthPassword;
+
+        try {
+            YokuraConfig.init(finalArgs);
+        } catch (IOException exception) {
+            exception.printStackTrace();
+        }
+
+        MinecraftServer minecraftServer = MinecraftServer.init();
+        minecraftServer.start("0.0.0.0", 25565);
+    }
+}
diff --git a/src/main/java/net/defade/yokura/YokuraPacketListener.java b/src/main/java/net/defade/yokura/YokuraPacketListener.java
index a4a26aa927e73beed35308641c1ecfe911c09457..3cc92e4db5487e5ae02bcf6327f9f44a5dfeba2b 100644
--- a/src/main/java/net/defade/yokura/YokuraPacketListener.java
+++ b/src/main/java/net/defade/yokura/YokuraPacketListener.java
@@ -9,6 +9,8 @@ import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundServers
 import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundStopServerPacket;
 import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundUpdateServerStatusPacket;
 import net.defade.bismuth.core.servers.GameType;
+import net.minestom.server.MinecraftServer;
+import net.minestom.server.extras.velocity.VelocityProxy;
 
 public class YokuraPacketListener extends YokuraClientPacketListener {
     public YokuraPacketListener(GameType gameType, String velocityIdTracker, InetSocketAddress address) {
@@ -17,7 +19,7 @@ public class YokuraPacketListener extends YokuraClientPacketListener {
 
     @Override
     public void handleForwardingKey(ClientboundForwardingKeyPacket clientboundForwardingKeyPacket) {
-
+        VelocityProxy.enable(clientboundForwardingKeyPacket.getForwardingKey());
     }
 
     @Override
@@ -42,6 +44,6 @@ public class YokuraPacketListener extends YokuraClientPacketListener {
 
     @Override
     public void handleStopServer(ClientboundStopServerPacket clientboundStopServerPacket) {
-
+        MinecraftServer.stopCleanly();
     }
 }
diff --git a/src/main/java/net/defade/yokura/config/YokuraConfig.java b/src/main/java/net/defade/yokura/config/YokuraConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..b413f83ada270c07f153206b9509b51ff3f7a7fe
--- /dev/null
+++ b/src/main/java/net/defade/yokura/config/YokuraConfig.java
@@ -0,0 +1,42 @@
+package net.defade.yokura.config;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.Map;
+
+public class YokuraConfig {
+    public static String bismuthHost = "localhost";
+    public static int bismuthPort = 9600;
+    public static byte[] bismuthPassword = new byte[0];
+    public static String velocityIdTracker = null;
+    public static boolean usesNgrok = false;
+
+    public static void init(String[] args) throws IOException {
+        Map<String, String> arguments = new HashMap<>();
+
+        for (String arg : args) {
+            if (arg.startsWith("--")) {
+                arg = arg.replace("--", "");
+                String[] argument = arg.split("=", 2);
+                System.out.println(Arrays.toString(argument));
+                arguments.put(argument[0], argument[1]);
+            }
+        }
+
+        bismuthHost = arguments.getOrDefault("bismuth-host", bismuthHost);
+
+        if(arguments.containsKey("bismuth-port")) {
+            bismuthPort = Integer.parseInt(arguments.get("bismuth-port"));
+        }
+
+        if(arguments.containsKey("bismuth-password")) {
+            bismuthPassword = Base64.getDecoder().decode(arguments.get("bismuth-password"));
+        }
+
+        velocityIdTracker = arguments.getOrDefault("velocity-id-tracker", velocityIdTracker);
+
+        usesNgrok = Boolean.parseBoolean(arguments.getOrDefault("ngrok", String.valueOf(usesNgrok)));
+    }
+}
diff --git a/src/main/java/net/defade/yokura/ngrok/NgrokException.java b/src/main/java/net/defade/yokura/ngrok/NgrokException.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6fd7130be963243ecff2f3713582ecf9ae1a700
--- /dev/null
+++ b/src/main/java/net/defade/yokura/ngrok/NgrokException.java
@@ -0,0 +1,21 @@
+package net.defade.yokura.ngrok;
+
+public class NgrokException extends Exception {
+    public NgrokException(String[] logs) {
+        this(getLogs(logs));
+    }
+    public NgrokException(String logs) {
+        super(logs);
+    }
+
+    private static String getLogs(String[] logs) {
+        StringBuilder logBuilder = new StringBuilder();
+
+        for (String log : logs) {
+            logBuilder.append(log);
+            logBuilder.append("\n");
+        }
+
+        return logBuilder.toString();
+    }
+}
diff --git a/src/main/java/net/defade/yokura/ngrok/NgrokProcess.java b/src/main/java/net/defade/yokura/ngrok/NgrokProcess.java
new file mode 100644
index 0000000000000000000000000000000000000000..58a08ada4b989ea0e739dd0acb9b1dcd174d894e
--- /dev/null
+++ b/src/main/java/net/defade/yokura/ngrok/NgrokProcess.java
@@ -0,0 +1,55 @@
+package net.defade.yokura.ngrok;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class NgrokProcess {
+    private String ngrokUrl = null;
+
+    public String start(int port) throws IOException, NgrokException {
+        ProcessBuilder processBuilder = new ProcessBuilder();
+        processBuilder.redirectErrorStream(true);
+        processBuilder.inheritIO().redirectOutput(ProcessBuilder.Redirect.PIPE);
+
+        List<String> command = new ArrayList<>();
+        command.add("ngrok");
+        command.add("tcp");
+        command.add(String.valueOf(port));
+        command.add("--log");
+        command.add("stdout");
+
+        processBuilder.command(command);
+
+        Process ngrokProcess = processBuilder.start();
+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+            ngrokProcess.destroy();
+            ngrokProcess.onExit().join();
+        }));
+
+        BufferedReader reader = new BufferedReader(new InputStreamReader(ngrokProcess.getInputStream()));
+
+        List<String> logs = new ArrayList<>();
+
+        String line;
+        while ((line = reader.readLine()) != null) {
+            logs.add(line);
+            if(line.contains("url=")) { // Get data
+                ngrokUrl = line.substring(line.indexOf("url=") + 10);
+                break;
+            }
+        }
+
+        if(ngrokUrl == null) {
+            throw new NgrokException(logs.toArray(new String[0]));
+        } else {
+            return ngrokUrl;
+        }
+    }
+
+    public String getNgrokUrl() {
+        return ngrokUrl;
+    }
+}
diff --git a/src/main/java/net/minestom/server/ServerProcessImpl.java b/src/main/java/net/minestom/server/ServerProcessImpl.java
index f6d76c2d4af327c1bfe1bbc0bb507b5a4519cf82..a0af2629e4689a1424203f51b9cc56f2279d34fa 100644
--- a/src/main/java/net/minestom/server/ServerProcessImpl.java
+++ b/src/main/java/net/minestom/server/ServerProcessImpl.java
@@ -5,6 +5,9 @@ import net.defade.bismuth.client.BismuthClient;
 import net.defade.bismuth.core.servers.GameType;
 import net.defade.bismuth.core.servers.ServerStatus;
 import net.defade.yokura.YokuraPacketListener;
+import net.defade.yokura.config.YokuraConfig;
+import net.defade.yokura.ngrok.NgrokException;
+import net.defade.yokura.ngrok.NgrokProcess;
 import net.minestom.server.advancements.AdvancementManager;
 import net.minestom.server.adventure.bossbar.BossBarManager;
 import net.minestom.server.command.CommandManager;
@@ -40,6 +43,7 @@ import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.io.IOException;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.List;
@@ -74,7 +78,7 @@ final class ServerProcessImpl implements ServerProcess {
     private final ThreadDispatcher<Chunk> dispatcher;
     private final Ticker ticker;
 
-    private final YokuraPacketListener bismuth;
+    private YokuraPacketListener bismuth;
 
     private final AtomicBoolean started = new AtomicBoolean();
     private final AtomicBoolean stopped = new AtomicBoolean();
@@ -102,8 +106,6 @@ final class ServerProcessImpl implements ServerProcess {
 
         this.dispatcher = ThreadDispatcher.singleThread();
         this.ticker = new TickerImpl();
-
-        this.bismuth = new YokuraPacketListener(new GameType("", ""), "", new java.net.InetSocketAddress("", -1));
     }
 
     @Override
@@ -222,7 +224,27 @@ final class ServerProcessImpl implements ServerProcess {
             throw new IllegalStateException("Server already started");
         }
 
-        BismuthClient bismuthClient = new BismuthClient("localhost", 9600, new byte[0]);
+        BismuthClient bismuthClient = new BismuthClient(YokuraConfig.bismuthHost, YokuraConfig.bismuthPort, YokuraConfig.bismuthPassword);
+        extension.start();
+
+        int port;
+        try {
+            java.net.ServerSocket serverSocket = new java.net.ServerSocket(0);
+            port = serverSocket.getLocalPort();
+            serverSocket.close();
+
+            if(YokuraConfig.usesNgrok) {
+                String[] url = new NgrokProcess().start(port).split(":");
+                socketAddress = new java.net.InetSocketAddress(url[0], Integer.parseInt(url[1]));
+            } else {
+                socketAddress = new java.net.InetSocketAddress("localhost", port);
+            }
+        } catch (IOException | NgrokException e) {
+            exception.handleException(e);
+            throw new RuntimeException(e);
+        }
+
+        this.bismuth = new YokuraPacketListener(extension.getServerGameType(), YokuraConfig.velocityIdTracker, (InetSocketAddress) socketAddress);
         CompletableFuture<Void> connectFuture = bismuthClient.connect(bismuth);
         try {
             connectFuture.get();
@@ -231,7 +253,6 @@ final class ServerProcessImpl implements ServerProcess {
             throw new RuntimeException(e);
         }
 
-        extension.start();
         extension.gotoPreInit();
 
         LOGGER.info("Starting " + MinecraftServer.getBrandName() + " server.");
@@ -240,7 +261,7 @@ final class ServerProcessImpl implements ServerProcess {
 
         // Init server
         try {
-            server.init(socketAddress);
+            server.init(new java.net.InetSocketAddress("localhost", port));
         } catch (IOException e) {
             exception.handleException(e);
             throw new RuntimeException(e);
diff --git a/src/main/java/net/minestom/server/extensions/Extension.java b/src/main/java/net/minestom/server/extensions/Extension.java
index 020f229cb228f4726bcff4fee1aa223100147073..37c4340d7c02be77d0fab03c5afe24fb7da22dd7 100644
--- a/src/main/java/net/minestom/server/extensions/Extension.java
+++ b/src/main/java/net/minestom/server/extensions/Extension.java
@@ -1,5 +1,6 @@
 package net.minestom.server.extensions;
 
+import net.defade.bismuth.core.servers.GameType;
 import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
 import net.minestom.server.event.Event;
 import net.minestom.server.event.EventNode;
@@ -53,6 +54,11 @@ public abstract class Extension {
         throw new IllegalStateException("Extension class loader is not an ExtensionClassLoader");
     }
 
+    @Nullable
+    public GameType serverGameType() {
+        return null;
+    }
+
     @NotNull
     public DiscoveredExtension getOrigin() {
         return getExtensionClassLoader().getDiscoveredExtension();
diff --git a/src/main/java/net/minestom/server/extensions/ExtensionManager.java b/src/main/java/net/minestom/server/extensions/ExtensionManager.java
index dfb9be46b11aaf55d7ae03f6b4a216eedcd37470..2f56e1b7eb23f8b7e9c630f92d6d218a0984c56a 100644
--- a/src/main/java/net/minestom/server/extensions/ExtensionManager.java
+++ b/src/main/java/net/minestom/server/extensions/ExtensionManager.java
@@ -1,6 +1,7 @@
 package net.minestom.server.extensions;
 
 import com.google.gson.Gson;
+import net.defade.bismuth.core.servers.GameType;
 import net.minestom.dependencies.DependencyGetter;
 import net.minestom.dependencies.ResolvedDependency;
 import net.minestom.dependencies.maven.MavenRepository;
@@ -697,4 +698,17 @@ public class ExtensionManager {
         // cleanup classloader
         // TODO: Is it necessary to remove the CLs since this is only called on shutdown?
     }
+
+    public GameType getServerGameType() {
+        GameType gameType = null;
+        for (Extension extension : extensions.values()) {
+            if(extension.serverGameType() != null) {
+                gameType = extension.serverGameType();
+                break;
+            }
+        }
+
+        if(gameType == null) gameType = new GameType("unknown", "unknown");
+        return gameType;
+    }
 }
diff --git a/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java b/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
index c817ed425d676a82dca296919d3adffd071a761c..211e1cccbf52e2639ab2c081d0d4b1b42b827bb1 100644
--- a/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
+++ b/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
@@ -15,7 +15,7 @@ import static net.minestom.server.network.NetworkBuffer.*;
 /**
  * Support for <a href="https://velocitypowered.com/">Velocity</a> modern forwarding.
  * <p>
- * Can be enabled by simply calling {@link #enable(String)}.
+ * Can be enabled by simply calling {@link #enable(byte[])}.
  */
 public final class VelocityProxy {
     public static final String PLAYER_INFO_CHANNEL = "velocity:player_info";
@@ -31,9 +31,9 @@ public final class VelocityProxy {
      * @param secret the forwarding secret,
      *               be sure to do not hardcode it in your code but to retrieve it from a file or anywhere else safe
      */
-    public static void enable(@NotNull String secret) {
+    public static void enable(@NotNull byte[] secret) {
         VelocityProxy.enabled = true;
-        VelocityProxy.key = new SecretKeySpec(secret.getBytes(), MAC_ALGORITHM);
+        VelocityProxy.key = new SecretKeySpec(secret, MAC_ALGORITHM);
     }
 
     /**
