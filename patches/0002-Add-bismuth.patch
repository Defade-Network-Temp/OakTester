From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Wed, 3 Aug 2022 17:57:29 +0200
Subject: [PATCH] Add bismuth


diff --git a/build.gradle.kts b/build.gradle.kts
index 39200e231bb32f3dcd595de3ed55ddbcc3e3aa99..be741bc2ede0735c2718f3ff012cc1a31fde261f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -75,6 +75,8 @@ dependencies {
     // Minestom Data (From MinestomDataGenerator)
     implementation(libs.minestomData)
 
+    api(libs.bismuth)
+
     // NBT parsing/manipulation/saving
     api("io.github.jglrxavpok.hephaistos:common:${libs.versions.hephaistos.get()}")
     api("io.github.jglrxavpok.hephaistos:gson:${libs.versions.hephaistos.get()}")
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index 28b30556efd165418319c2a14b0e09f5cde30715..4619874991eb81544e6eefa9f6573f140f11f958 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -39,6 +39,8 @@ jmh = "1.35"
 # JCStress
 jcstress = "0.8"
 
+bismuth = "1.1.0"
+
 [libraries]
 
 # Important Dependencies
@@ -96,6 +98,8 @@ jmh-annotationprocessor = { group = "org.openjdk.jmh", name = "jmh-generator-ann
 # JCStress
 jcstress-core = { group = "org.openjdk.jcstress", name = "jcstress-core", version.ref = "jcstress" }
 
+bismuth = { group = "net.defade.bismuth", name = "client", version.ref = "bismuth" }
+
 [bundles]
 
 kotlin = ["kotlin-stdlib-jdk8", "kotlin-reflect"]
diff --git a/settings.gradle.kts b/settings.gradle.kts
index a2d24392f10dc181932f4ae9e6699ed10e4ff3c1..a794d5e6df5bbbdac8510ff90e2677acf97f348a 100644
--- a/settings.gradle.kts
+++ b/settings.gradle.kts
@@ -5,6 +5,10 @@ dependencyResolutionManagement {
     repositories {
         maven("https://jitpack.io")
         mavenCentral()
+        maven("https://repo.defade.net/defade") {
+            name = "defade"
+            credentials(PasswordCredentials::class)
+        }
     }
 }
 
diff --git a/src/main/java/net/defade/yokura/YokuraPacketListener.java b/src/main/java/net/defade/yokura/YokuraPacketListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4a26aa927e73beed35308641c1ecfe911c09457
--- /dev/null
+++ b/src/main/java/net/defade/yokura/YokuraPacketListener.java
@@ -0,0 +1,47 @@
+package net.defade.yokura;
+
+import java.net.InetSocketAddress;
+import net.defade.bismuth.core.listeners.client.YokuraClientPacketListener;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundCreatedServerPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundDeletedServerPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundForwardingKeyPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundServersListPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundStopServerPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundUpdateServerStatusPacket;
+import net.defade.bismuth.core.servers.GameType;
+
+public class YokuraPacketListener extends YokuraClientPacketListener {
+    public YokuraPacketListener(GameType gameType, String velocityIdTracker, InetSocketAddress address) {
+        super(gameType, velocityIdTracker, address);
+    }
+
+    @Override
+    public void handleForwardingKey(ClientboundForwardingKeyPacket clientboundForwardingKeyPacket) {
+
+    }
+
+    @Override
+    public void handleServersList(ClientboundServersListPacket clientboundServersListPacket) {
+
+    }
+
+    @Override
+    public void handleCreatedServer(ClientboundCreatedServerPacket clientboundCreatedServerPacket) {
+
+    }
+
+    @Override
+    public void handleDeletedServer(ClientboundDeletedServerPacket clientboundDeletedServerPacket) {
+
+    }
+
+    @Override
+    public void handleUpdateServerStatus(ClientboundUpdateServerStatusPacket clientboundUpdateServerStatusPacket) {
+
+    }
+
+    @Override
+    public void handleStopServer(ClientboundStopServerPacket clientboundStopServerPacket) {
+
+    }
+}
diff --git a/src/main/java/net/minestom/server/MinecraftServer.java b/src/main/java/net/minestom/server/MinecraftServer.java
index 7b43a30b0eb653d692ac9f6d8bd64b5146df5075..aef3ad4be58ef24ad0ba027c843f46fc5023a5f4 100644
--- a/src/main/java/net/minestom/server/MinecraftServer.java
+++ b/src/main/java/net/minestom/server/MinecraftServer.java
@@ -1,5 +1,6 @@
 package net.minestom.server;
 
+import net.defade.yokura.YokuraPacketListener;
 import net.minestom.server.advancements.AdvancementManager;
 import net.minestom.server.adventure.bossbar.BossBarManager;
 import net.minestom.server.command.CommandManager;
@@ -311,6 +312,10 @@ public final class MinecraftServer {
         return serverProcess.server();
     }
 
+    public static YokuraPacketListener getBismuth() {
+        return serverProcess.bismuth();
+    }
+
     /**
      * Starts the server.
      * <p>
diff --git a/src/main/java/net/minestom/server/ServerProcess.java b/src/main/java/net/minestom/server/ServerProcess.java
index 89ec44a64d04b59006fcbea7a5616c0ccbaf0030..cdf6ef96681f3cd3680902463bb5ac896867e378 100644
--- a/src/main/java/net/minestom/server/ServerProcess.java
+++ b/src/main/java/net/minestom/server/ServerProcess.java
@@ -1,5 +1,6 @@
 package net.minestom.server;
 
+import net.defade.yokura.YokuraPacketListener;
 import net.minestom.server.advancements.AdvancementManager;
 import net.minestom.server.adventure.bossbar.BossBarManager;
 import net.minestom.server.command.CommandManager;
@@ -138,6 +139,11 @@ public interface ServerProcess extends Snapshotable {
      */
     @NotNull Ticker ticker();
 
+    /**
+     * Handles bismuth's packets.
+     */
+    @NotNull YokuraPacketListener bismuth();
+
     void start(@NotNull SocketAddress socketAddress);
 
     void stop();
diff --git a/src/main/java/net/minestom/server/ServerProcessImpl.java b/src/main/java/net/minestom/server/ServerProcessImpl.java
index 761fef7e5bd507adf4417109e922031dec42c37d..f6d76c2d4af327c1bfe1bbc0bb507b5a4519cf82 100644
--- a/src/main/java/net/minestom/server/ServerProcessImpl.java
+++ b/src/main/java/net/minestom/server/ServerProcessImpl.java
@@ -1,6 +1,10 @@
 package net.minestom.server;
 
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import net.defade.bismuth.client.BismuthClient;
+import net.defade.bismuth.core.servers.GameType;
+import net.defade.bismuth.core.servers.ServerStatus;
+import net.defade.yokura.YokuraPacketListener;
 import net.minestom.server.advancements.AdvancementManager;
 import net.minestom.server.adventure.bossbar.BossBarManager;
 import net.minestom.server.command.CommandManager;
@@ -35,11 +39,12 @@ import net.minestom.server.world.biomes.BiomeManager;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.io.IOException;
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -69,6 +74,8 @@ final class ServerProcessImpl implements ServerProcess {
     private final ThreadDispatcher<Chunk> dispatcher;
     private final Ticker ticker;
 
+    private final YokuraPacketListener bismuth;
+
     private final AtomicBoolean started = new AtomicBoolean();
     private final AtomicBoolean stopped = new AtomicBoolean();
 
@@ -95,6 +102,8 @@ final class ServerProcessImpl implements ServerProcess {
 
         this.dispatcher = ThreadDispatcher.singleThread();
         this.ticker = new TickerImpl();
+
+        this.bismuth = new YokuraPacketListener(new GameType("", ""), "", new java.net.InetSocketAddress("", -1));
     }
 
     @Override
@@ -202,12 +211,26 @@ final class ServerProcessImpl implements ServerProcess {
         return ticker;
     }
 
+    @Override
+    public @NotNull YokuraPacketListener bismuth() {
+        return bismuth;
+    }
+
     @Override
     public void start(@NotNull SocketAddress socketAddress) {
         if (!started.compareAndSet(false, true)) {
             throw new IllegalStateException("Server already started");
         }
 
+        BismuthClient bismuthClient = new BismuthClient("localhost", 9600, new byte[0]);
+        CompletableFuture<Void> connectFuture = bismuthClient.connect(bismuth);
+        try {
+            connectFuture.get();
+        } catch (InterruptedException | ExecutionException e) {
+            exception.handleException(e);
+            throw new RuntimeException(e);
+        }
+
         extension.start();
         extension.gotoPreInit();
 
