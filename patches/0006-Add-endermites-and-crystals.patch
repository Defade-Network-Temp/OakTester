From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Thu, 25 Aug 2022 16:14:40 +0200
Subject: [PATCH] Add endermites and crystals


diff --git a/src/main/java/net/minestom/server/entity/Player.java b/src/main/java/net/minestom/server/entity/Player.java
index eee8b88643dd13afd91bbc43c9c724a00e77afed..824c5c7b94282815d5adc391c71dda047e96133f 100644
--- a/src/main/java/net/minestom/server/entity/Player.java
+++ b/src/main/java/net/minestom/server/entity/Player.java
@@ -1,6 +1,7 @@
 package net.minestom.server.entity;
 
 import net.defade.bismuth.core.servers.Server;
+import net.defade.yokura.utils.MongoUtils;
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.bossbar.BossBar;
 import net.kyori.adventure.identity.Identified;
@@ -82,6 +83,7 @@ import net.minestom.server.utils.time.Cooldown;
 import net.minestom.server.utils.time.TimeUnit;
 import net.minestom.server.utils.validate.Check;
 import net.minestom.server.world.DimensionType;
+import org.bson.Document;
 import org.jctools.queues.MessagePassingQueue;
 import org.jctools.queues.MpscUnboundedXaddArrayQueue;
 import org.jetbrains.annotations.ApiStatus;
@@ -202,6 +204,10 @@ public class Player extends LivingEntity implements CommandSender, Localizable,
     private Identity identity;
     private final Pointers pointers;
 
+    // Yokura
+    private double endermites;
+    private double crystals;
+
     public Player(@NotNull UUID uuid, @NotNull String username, @NotNull PlayerConnection playerConnection) {
         super(EntityType.PLAYER, uuid);
         this.username = username;
@@ -234,6 +240,67 @@ public class Player extends LivingEntity implements CommandSender, Localizable,
                 .build();
     }
 
+    public void updatePlayerData() {
+        Document playerData = MongoUtils.getDocumentFromId("players", getUuid().toString()).orElse(null);
+
+        if(playerData == null) {
+            playerData = new Document("_id", getUuid().toString())
+                    .append("endermites", MinecraftServer.getBismuth().getNetworkInfos().getDefaultEndermites())
+                    .append("crystals", MinecraftServer.getBismuth().getNetworkInfos().getDefaultCrystals());
+
+            MongoUtils.insertDocument("players", playerData);
+        }
+
+        endermites = playerData.getDouble("endermites");
+        crystals = playerData.getDouble("crystals");
+    }
+
+    public void addEndermites(double endermites) {
+        this.endermites += endermites;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "endermites", endermites));
+    }
+
+    public void removeEndermites(double endermites) {
+        this.endermites -= endermites;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "endermites", endermites));
+    }
+
+    public void setEndermites(double endermites) {
+        this.endermites = endermites;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "endermites", endermites));
+    }
+
+    public double getEndermites() {
+        return endermites;
+    }
+
+    public boolean hasEnoughEndermites(double endermites) {
+        return this.endermites >= endermites;
+    }
+
+    public void addCrystals(double crystals) {
+        this.crystals += crystals;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "crystals", crystals));
+    }
+
+    public void removeCrystals(double crystals) {
+        this.crystals -= crystals;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "crystals", crystals));
+    }
+
+    public void setCrystals(double crystals) {
+        this.crystals = crystals;
+        MongoUtils.executeAsync(() -> MongoUtils.updateValue("players", getUuid().toString(), "crystals", crystals));
+    }
+
+    public double getCrystals() {
+        return crystals;
+    }
+
+    public boolean hasEnoughCrystals(double crystals) {
+        return this.crystals >= crystals;
+    }
+
     /**
      * Used when the player is created.
      * Init the player and spawn him.
diff --git a/src/main/java/net/minestom/server/network/ConnectionManager.java b/src/main/java/net/minestom/server/network/ConnectionManager.java
index b080de14ec2509b15108f171694653d3dc62cd93..2638c8992617e7f8ad60204d2614581a9449c1a3 100644
--- a/src/main/java/net/minestom/server/network/ConnectionManager.java
+++ b/src/main/java/net/minestom/server/network/ConnectionManager.java
@@ -217,6 +217,9 @@ public final class ConnectionManager {
                     player.setUuid(eventUuid);
                 }
             }
+
+            player.updatePlayerData();
+
             // Send login success packet
             LoginSuccessPacket loginSuccessPacket = new LoginSuccessPacket(player.getUuid(), player.getUsername(), 0);
             playerConnection.sendPacket(loginSuccessPacket);
