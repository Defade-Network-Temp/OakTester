From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sun, 21 Aug 2022 23:29:22 +0200
Subject: [PATCH] Add server system


diff --git a/build.gradle.kts b/build.gradle.kts
index 703412fe711056d7d18b2012750dbc0ae0b52afc..308ed86736eb50eb0a9c45fcadd8161b26c398dc 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,7 +1,11 @@
+import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
+
 plugins {
     `java-library`
+    application
     id("minestom.publishing-conventions")
     id("minestom.native-conventions")
+    id("com.github.johnrengelman.shadow") version ("7.1.1")
 }
 
 allprojects {
@@ -40,6 +44,13 @@ tasks {
     }
 }
 
+application {
+    mainClass.set("net.defade.yokura.Main")
+    // This is included because Shadow is buggy. Wait for https://github.com/johnrengelman/shadow/issues/613 to befixed.
+    @Suppress("DEPRECATION")
+    mainClassName = "net.defade.yokura.Main"
+}
+
 dependencies {
     // Junit Testing Framework
     testImplementation(libs.junit.api)
@@ -85,3 +96,7 @@ dependencies {
     api("io.github.jglrxavpok.hephaistos:common:${libs.versions.hephaistos.get()}")
     api("io.github.jglrxavpok.hephaistos:gson:${libs.versions.hephaistos.get()}")
 }
+
+tasks.withType<ShadowJar> {
+    archiveFileName.set("yokura.jar")
+}
\ No newline at end of file
diff --git a/src/main/java/net/defade/yokura/Main.java b/src/main/java/net/defade/yokura/Main.java
new file mode 100644
index 0000000000000000000000000000000000000000..24a5b433e0e5b8dbe485fa69b08735546048bfb4
--- /dev/null
+++ b/src/main/java/net/defade/yokura/Main.java
@@ -0,0 +1,44 @@
+package net.defade.yokura;
+
+import net.defade.yokura.config.YokuraConfig;
+import net.minestom.server.MinecraftServer;
+
+import java.io.*;
+
+public class Main {
+    public static void main(String[] args) {
+        String bismuthPassword;
+        File bismuthPasswordFile = new File("bismuth.password");
+
+        try {
+            if (!bismuthPasswordFile.exists()) {
+                bismuthPasswordFile.createNewFile();
+
+
+                PrintWriter printWriter = new PrintWriter(new FileWriter(bismuthPasswordFile));
+                printWriter.write("YQ=="); // 'a' character
+                printWriter.close();
+            }
+
+            BufferedReader bufferedReader = new BufferedReader(new FileReader(bismuthPasswordFile));
+            bismuthPassword = bufferedReader.readLine();
+        } catch (IOException exception) {
+            exception.printStackTrace();
+            System.exit(1);
+            return;
+        }
+
+        String[] finalArgs = new String[args.length + 1];
+        System.arraycopy(args, 0, finalArgs, 0, args.length);
+        finalArgs[finalArgs.length - 1] = "--bismuth-password=" + bismuthPassword;
+
+        try {
+            YokuraConfig.init(finalArgs);
+        } catch (IOException exception) {
+            exception.printStackTrace();
+        }
+
+        MinecraftServer minecraftServer = MinecraftServer.init();
+        minecraftServer.start("0.0.0.0", 25565);
+    }
+}
diff --git a/src/main/java/net/defade/yokura/YokuraPacketListener.java b/src/main/java/net/defade/yokura/YokuraPacketListener.java
index dd74b16a66dbcf46e40e23888e36b546bcc29c2e..407a0c90d4db6c0d9b04e78dfce51b8eae7ef118 100644
--- a/src/main/java/net/defade/yokura/YokuraPacketListener.java
+++ b/src/main/java/net/defade/yokura/YokuraPacketListener.java
@@ -8,6 +8,8 @@ import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundServers
 import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundStopServerPacket;
 import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundUpdateServerStatusPacket;
 import net.defade.bismuth.core.servers.Server;
+import net.minestom.server.MinecraftServer;
+import net.minestom.server.extras.velocity.VelocityProxy;
 
 public class YokuraPacketListener extends YokuraClientPacketListener {
     public YokuraPacketListener(Server server, int port) {
@@ -16,7 +18,7 @@ public class YokuraPacketListener extends YokuraClientPacketListener {
 
     @Override
     public void handleForwardingKey(ClientboundForwardingKeyPacket clientboundForwardingKeyPacket) {
-
+        VelocityProxy.enable(clientboundForwardingKeyPacket.getForwardingKey());
     }
 
     @Override
@@ -41,6 +43,6 @@ public class YokuraPacketListener extends YokuraClientPacketListener {
 
     @Override
     public void handleStopServer(ClientboundStopServerPacket clientboundStopServerPacket) {
-
+        MinecraftServer.stopCleanly();
     }
 }
diff --git a/src/main/java/net/defade/yokura/config/YokuraConfig.java b/src/main/java/net/defade/yokura/config/YokuraConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..be6f06016586286c2f89049af663c22b16925f9c
--- /dev/null
+++ b/src/main/java/net/defade/yokura/config/YokuraConfig.java
@@ -0,0 +1,39 @@
+package net.defade.yokura.config;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.Map;
+
+public class YokuraConfig {
+    public static String bismuthHost = "localhost";
+    public static int bismuthPort = 9600;
+    public static byte[] bismuthPassword = new byte[0];
+    public static String serverId = "";
+
+    public static void init(String[] args) throws IOException {
+        Map<String, String> arguments = new HashMap<>();
+
+        for (String arg : args) {
+            if (arg.startsWith("--")) {
+                arg = arg.replace("--", "");
+                String[] argument = arg.split("=", 2);
+                System.out.println(Arrays.toString(argument));
+                arguments.put(argument[0], argument[1]);
+            }
+        }
+
+        bismuthHost = arguments.getOrDefault("bismuth-host", bismuthHost);
+
+        if(arguments.containsKey("bismuth-port")) {
+            bismuthPort = Integer.parseInt(arguments.get("bismuth-port"));
+        }
+
+        if(arguments.containsKey("bismuth-password")) {
+            bismuthPassword = Base64.getDecoder().decode(arguments.get("bismuth-password"));
+        }
+
+        serverId = arguments.getOrDefault("server-id", serverId);
+    }
+}
diff --git a/src/main/java/net/minestom/server/ServerProcessImpl.java b/src/main/java/net/minestom/server/ServerProcessImpl.java
index 48940286aafa522df0c3e4b4bc3323d90b3ed496..1fd2f1df7a20098021addc83f71e1152accf936b 100644
--- a/src/main/java/net/minestom/server/ServerProcessImpl.java
+++ b/src/main/java/net/minestom/server/ServerProcessImpl.java
@@ -5,6 +5,7 @@ import net.defade.bismuth.client.BismuthClient;
 import net.defade.bismuth.core.servers.GameType;
 import net.defade.bismuth.core.servers.ServerStatus;
 import net.defade.yokura.YokuraPacketListener;
+import net.defade.yokura.config.YokuraConfig;
 import net.minestom.server.advancements.AdvancementManager;
 import net.minestom.server.adventure.bossbar.BossBarManager;
 import net.minestom.server.command.CommandManager;
@@ -40,6 +41,8 @@ import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.ServerSocket;
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.List;
@@ -74,7 +77,7 @@ final class ServerProcessImpl implements ServerProcess {
     private final ThreadDispatcher<Chunk> dispatcher;
     private final Ticker ticker;
 
-    private final YokuraPacketListener bismuth;
+    private YokuraPacketListener bismuth;
 
     private final AtomicBoolean started = new AtomicBoolean();
     private final AtomicBoolean stopped = new AtomicBoolean();
@@ -102,8 +105,6 @@ final class ServerProcessImpl implements ServerProcess {
 
         this.dispatcher = ThreadDispatcher.singleThread();
         this.ticker = new TickerImpl();
-
-        this.bismuth = new YokuraPacketListener(new net.defade.bismuth.core.servers.Server("", new GameType("", ""), ServerStatus.ACCEPTING_PLAYERS), -1);
     }
 
     @Override
@@ -222,7 +223,22 @@ final class ServerProcessImpl implements ServerProcess {
             throw new IllegalStateException("Server already started");
         }
 
-        BismuthClient bismuthClient = new BismuthClient("localhost", 9600, new byte[0]);
+        extension.start();
+
+        int port;
+        try {
+            ServerSocket serverSocket = new ServerSocket(0);
+            port = serverSocket.getLocalPort();
+            serverSocket.close();
+        } catch (IOException e) {
+            exception.handleException(e);
+            throw new RuntimeException(e);
+        }
+
+        socketAddress = new InetSocketAddress("localhost", port);
+
+        this.bismuth = new YokuraPacketListener(new net.defade.bismuth.core.servers.Server(YokuraConfig.serverId, extension.getServerGameType(), ServerStatus.ACCEPTING_PLAYERS), port);
+        BismuthClient bismuthClient = new BismuthClient("localhost", 9600, YokuraConfig.bismuthPassword);
         CompletableFuture<Void> connectFuture = bismuthClient.connect(bismuth);
         try {
             connectFuture.get();
@@ -231,7 +247,6 @@ final class ServerProcessImpl implements ServerProcess {
             throw new RuntimeException(e);
         }
 
-        extension.start();
         extension.gotoPreInit();
 
         LOGGER.info("Starting " + MinecraftServer.getBrandName() + " server.");
diff --git a/src/main/java/net/minestom/server/extensions/Extension.java b/src/main/java/net/minestom/server/extensions/Extension.java
index 1130e83ec7beae5f31e43e7d9384ab1016babf1c..6477a461e0174ca94ab5c77fc244a398468b8ca4 100644
--- a/src/main/java/net/minestom/server/extensions/Extension.java
+++ b/src/main/java/net/minestom/server/extensions/Extension.java
@@ -1,5 +1,6 @@
 package net.minestom.server.extensions;
 
+import net.defade.bismuth.core.servers.GameType;
 import net.minestom.server.event.Event;
 import net.minestom.server.event.EventNode;
 import org.jetbrains.annotations.NotNull;
@@ -56,6 +57,11 @@ public abstract class Extension {
 
     }
 
+    @Nullable
+    public GameType serverGameType() {
+        return null;
+    }
+
     @NotNull
     public DiscoveredExtension getOrigin() {
         return origin;
diff --git a/src/main/java/net/minestom/server/extensions/ExtensionManager.java b/src/main/java/net/minestom/server/extensions/ExtensionManager.java
index 7c92fd60acc7fba93ac788ed1f9869f6fb0560b8..8ed349ff58e4ece4ea6ad73e35db1a32724546fe 100644
--- a/src/main/java/net/minestom/server/extensions/ExtensionManager.java
+++ b/src/main/java/net/minestom/server/extensions/ExtensionManager.java
@@ -1,6 +1,7 @@
 package net.minestom.server.extensions;
 
 import com.google.gson.Gson;
+import net.defade.bismuth.core.servers.GameType;
 import net.minestom.dependencies.DependencyGetter;
 import net.minestom.dependencies.ResolvedDependency;
 import net.minestom.dependencies.maven.MavenRepository;
@@ -743,4 +744,17 @@ public class ExtensionManager {
         // cleanup classloader
         // TODO: Is it necessary to remove the CLs since this is only called on shutdown?
     }
+
+    public GameType getServerGameType() {
+        GameType gameType = null;
+        for (Extension extension : extensions.values()) {
+            if(extension.serverGameType() != null) {
+                gameType = extension.serverGameType();
+                break;
+            }
+        }
+
+        if(gameType == null) gameType = new GameType("unknown", "unknown");
+        return gameType;
+    }
 }
diff --git a/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java b/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
index 9fc8923986fe106e8e9693ff9026d829e9cf913c..2aa0bb4dc4ab19aaea113fd3e5c88202dc5e0f55 100644
--- a/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
+++ b/src/main/java/net/minestom/server/extras/velocity/VelocityProxy.java
@@ -18,7 +18,7 @@ import java.security.NoSuchAlgorithmException;
 /**
  * Support for <a href="https://velocitypowered.com/">Velocity</a> modern forwarding.
  * <p>
- * Can be enabled by simply calling {@link #enable(String)}.
+ * Can be enabled by simply calling {@link #enable(byte[])}.
  */
 public final class VelocityProxy {
     public static final String PLAYER_INFO_CHANNEL = "velocity:player_info";
@@ -34,9 +34,9 @@ public final class VelocityProxy {
      * @param secret the forwarding secret,
      *               be sure to do not hardcode it in your code but to retrieve it from a file or anywhere else safe
      */
-    public static void enable(@NotNull String secret) {
+    public static void enable(@NotNull byte[] secret) {
         VelocityProxy.enabled = true;
-        VelocityProxy.key = new SecretKeySpec(secret.getBytes(), MAC_ALGORITHM);
+        VelocityProxy.key = new SecretKeySpec(secret, MAC_ALGORITHM);
     }
 
     /**
